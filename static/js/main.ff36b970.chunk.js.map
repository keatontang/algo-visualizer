{"version":3,"sources":["AlgorithmVisualizer/Node/Node.jsx","algorithms/dijkstra.js","AlgorithmVisualizer/AlgorithmVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","column","isFinish","isStart","isVisited","row","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getNeighbors","previousNode","AlgorithmVisualizer","mouseIsPressed","movingStart","movingFinish","startNodeRow","startNodeColumn","finishNodeRow","finishNodeColumn","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","getNewGridWithStartMoved","getNewGridWithFinishMoved","document","getElementById","style","pointerEvents","nodesInShortestPathOrder","nodesInShortestPath","currentNode","unshift","getNodesInShortestPath","animateDijkstra","i","setTimeout","animateShortestPath","window","location","reload","AppBar","position","Toolbar","Typography","variant","Button","color","size","onClick","visualizeDijkstra","clearGrid","IconButton","href","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","currentRow","createNode","slice","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff36b970.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      column,\n      isFinish,\n      isStart,\n      isVisited,\n      row,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      onMouseLeave\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isVisited\n      ? \"node-visited\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${column}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, column)}\n        onMouseEnter={() => onMouseEnter(row, column)}\n        onMouseUp={() => onMouseUp()}\n        onMouseLeave={() => onMouseLeave(row, column)}\n      ></div>\n    );\n  }\n}\n\nexport const DEFAULT_NODE = {\n  row: 0,\n  column: 0\n};\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    //Handles walls\n    if (closestNode.isWall) continue;\n    //Handles if we cannot get to the target node\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    // return;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { column, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][column]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][column]);\n  if (column > 0) neighbors.push(grid[row][column - 1]);\n  if (column < grid[0].length - 1) neighbors.push(grid[row][column + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPath(finishNode) {\n  const nodesInShortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPath;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./AlgorithmVisualizer.css\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport { dijkstra, getNodesInShortestPath } from \"../algorithms/dijkstra\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COLUMN = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COLUMN = 35;\n\nexport default class AlgorithmVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      movingStart: false,\n      movingFinish: false,\n      startNodeRow: 10,\n      startNodeColumn: 15,\n      finishNodeRow: 10,\n      finishNodeColumn: 35\n    };\n  }\n\n  //This will initialize the grid and set the state of nodes\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n  //these functions handle user-input walls\n  handleMouseDown(row, column) {\n    if (this.state.grid[row][column].isStart) {\n      this.setState({ movingStart: true, mouseIsPressed: true });\n    } else if (this.state.grid[row][column].isFinish) {\n      this.setState({ movingFinish: true, mouseIsPressed: true });\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, column);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseEnter(row, column) {\n    if (!this.state.mouseIsPressed) return;\n    if (this.state.movingStart) {\n      const newGrid = getNewGridWithStartMoved(this.state.grid, row, column);\n      newGrid[row][column].isStart = true;\n      this.setState({\n        grid: newGrid,\n        startNodeRow: row,\n        startNodeColumn: column\n      });\n    } else if (this.state.movingFinish) {\n      const newGrid = getNewGridWithFinishMoved(this.state.grid, row, column);\n      newGrid[row][column].isFinish = true;\n      this.setState({\n        grid: newGrid,\n        finishNodeRow: row,\n        finishNodeColumn: column\n      });\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, column);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseLeave(row, column) {\n    if (this.state.movingStart) {\n      const newGrid = this.state.grid;\n      newGrid[row][column].isStart = false;\n      this.setState({ grid: newGrid });\n    } else if (this.state.movingFinish) {\n      const newGrid = this.state.grid;\n      newGrid[row][column].isFinish = false;\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false,\n      movingStart: false,\n      movingFinish: false\n    });\n  }\n\n  visualizeDijkstra() {\n    //disables all mouse events when the algorithm is visualizing\n    document.getElementById(\"grid\").style.pointerEvents = \"none\";\n    const { grid } = this.state;\n    const startNode = grid[this.state.startNodeRow][this.state.startNodeColumn];\n    const finishNode =\n      grid[this.state.finishNodeRow][this.state.finishNodeColumn];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPath(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.column}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n\n    //Animate the shortest path\n    setTimeout(() => {\n      this.animateShortestPath(nodesInShortestPathOrder);\n      // this.state.grid = getInitialGrid();\n    }, 10 * visitedNodesInOrder.length);\n    // this.state.grid = getInitialGrid();\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.column}`).className =\n          \"node node-path\";\n      }, 10 * i);\n    }\n  }\n\n  //Clears the grid... by refreshing the page\n  clearGrid() {\n    window.location.reload(false);\n  }\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    //iterate through every row/column and create a grid\n    return (\n      <>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Pathfinding Algorithm Visualizer\n            </Typography>\n            <Button\n              color=\"inherit\"\n              size=\"large\"\n              onClick={() => this.visualizeDijkstra()}\n            >\n              Visualize Dijkstra's Algorithm\n            </Button>\n            <br /> <br />\n            <Button\n              color=\"inherit\"\n              size=\"medium\"\n              onClick={() => this.clearGrid()}\n            >\n              Clear Grid\n            </Button>\n            <IconButton>\n              <a href=\"https://github.com/keatontang\" color=\"#fff\">\n                <GitHubIcon></GitHubIcon>\n              </a>\n            </IconButton>\n            {/* <a href=\"https://github.com/keatontang\">\n              <GitHubIcon></GitHubIcon>\n            </a> */}\n          </Toolbar>\n        </AppBar>\n        <div className=\"grid\" id=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const {\n                    row,\n                    column,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isWall\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isVisited={isVisited}\n                      isWall={isWall}\n                      row={row}\n                      column={column}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, column) =>\n                        this.handleMouseDown(row, column)\n                      }\n                      onMouseEnter={(row, column) =>\n                        this.handleMouseEnter(row, column)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      onMouseLeave={() => this.handleMouseLeave(row, column)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 25; row++) {\n    const currentRow = [];\n    for (let column = 0; column < 50; column++) {\n      currentRow.push(createNode(column, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (column, row) => {\n  return {\n    column,\n    row,\n    //Boolean values that store if the node is in the finish/start position\n    isStart: row === START_NODE_ROW && column === START_NODE_COLUMN,\n    isFinish: row === FINISH_NODE_ROW && column === FINISH_NODE_COLUMN,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, column) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][column];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][column] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartMoved = (grid, row, column) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][column];\n  const newNode = {\n    ...node,\n    isStart: !node.isStart\n  };\n  newGrid[row][column] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinishMoved = (grid, row, column) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][column];\n  const newNode = {\n    ...node,\n    isFinish: !node.isFinish\n  };\n  newGrid[row][column] = newNode;\n  return newGrid;\n};\n\n//This will turn any visited node into an unvisited node\n// const clearGridOfAlgorithm = grid => {\n//   const newGrid = grid.slice();\n//   for (let row = 0; row < 20; row++) {\n//     for (let column = 0; column < 50; column++) {\n//       if (newGrid[row][column].isVisited) {\n//         newGrid[row][column].isVisited = false;\n//       }\n//     }\n//   }\n//   return newGrid;\n// };\n","import React from \"react\";\nimport \"./App.css\";\nimport \"typeface-roboto\";\n\nimport AlgorithmVisualizer from \"./AlgorithmVisualizer/AlgorithmVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgorithmVisualizer></AlgorithmVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}